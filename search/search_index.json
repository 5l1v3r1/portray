{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"portray - Your Project with Great Documentation Read Latest Documentation - Browse GitHub Code Repository Portray is a Python tool that helps you create great documentation for your projects with as little effort as possible. Under the hood portray combines the markdown documentation rendering capabilities provided by MkDocs with the automatic reference documentation generated by PDoc3.","title":"Home"},{"location":"#portray-your-project-with-great-documentation","text":"Read Latest Documentation - Browse GitHub Code Repository Portray is a Python tool that helps you create great documentation for your projects with as little effort as possible. Under the hood portray combines the markdown documentation rendering capabilities provided by MkDocs with the automatic reference documentation generated by PDoc3.","title":"portray - Your Project with Great Documentation"},{"location":"reference/portray/","text":"Module portray View Source from portray.api import as_html , in_browser , project_configuration , server __version__ = \"0.0.5\" Sub-modules portray.api portray.cli portray.config portray.exceptions portray.render","title":"Index"},{"location":"reference/portray/#module-portray","text":"View Source from portray.api import as_html , in_browser , project_configuration , server __version__ = \"0.0.5\"","title":"Module portray"},{"location":"reference/portray/#sub-modules","text":"portray.api portray.cli portray.config portray.exceptions portray.render","title":"Sub-modules"},{"location":"reference/portray/api/","text":"Module portray.api This module defines the programmatic API that can be used to interact with portray to generate and view documentation. If you want to extend portray or use it directly from within Python - this is the place to start. View Source \"\"\"This module defines the programmatic API that can be used to interact with `portray` to generate and view documentation. If you want to extend `portray` or use it directly from within Python - this is the place to start. \"\"\" import os import webbrowser import hug from mkdocs.commands.gh_deploy import gh_deploy from portray import config , render def as_html ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , output_dir : str = \"site\" , overwrite : bool = False , ): \"\"\"Produces HTML documentation for a Python project. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *output_dir*: The directory to place the generated HTML into. \"\"\" render . documentation ( project_configuration ( directory , config_file ), overwrite = overwrite ) def in_browser ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , port : int = None , host : str = None , ): \"\"\"Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *port*: The port to expose your documentation on (defaults to: `8000`) - *host*: The host to expose your documentation on (defaults to `\"127.0.0.1\"`) \"\"\" return server ( directory = directory , config_file = config_file , open_browser = True ) def server ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , open_browser : bool = False , port : int = None , host : str = None , ): \"\"\"Runs a development webserver enabling you to browse documentation locally. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *open_browser\": If true a browser will be opened pointing at the documentation server - *port*: The port to expose your documentation on (defaults to: `8000`) - *host*: The host to expose your documentation on (defaults to `\"127.0.0.1\"`) \"\"\" api = hug . API ( \"Doc Server\" ) project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) as doc_folder : @hug.static ( \"/\" , api = api ) def my_static_dirs (): return ( doc_folder ,) if open_browser : @hug.startup ( api = api ) def open_browser_to_docs ( * args , ** kwargs ): webbrowser . open_new ( \"{}:{}\" . format ( project_config [ \"host\" ], project_config [ \"port\" ])) api . http . serve ( host = host or project_config [ \"host\" ], port = port or project_config [ \"port\" ], no_documentation = True , display_intro = False , ) def project_configuration ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" ): \"\"\"Returns the configuration associated with a project. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. \"\"\" return config . project ( directory = directory , config_file = config_file ) def on_github_pages ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , message : str = None , force : bool = False , ignore_version : bool = False , ): \"\"\"Regenerates and deploys the documentation to GitHub pages. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *message*: The commit message to use when uploading your documentation. - *force*: Force the push to the repository. - *ignore_version*: Ignore check that build is not being deployed with an old version. \"\"\" project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ): conf = render . _mkdocs_config ( project_config [ \"mkdocs\" ]) conf . config_file_path = directory gh_deploy ( conf , message = message , force = force , ignore_version = ignore_version , ) Functions as_html def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , output_dir : str = 'site' , overwrite : bool = False ) Produces HTML documentation for a Python project. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. output_dir : The directory to place the generated HTML into. View Source def as_html ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , output_dir : str = \" site \" , overwrite : bool = False , ) : \"\"\" Produces HTML documentation for a Python project. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * output_dir * : The directory to place the generated HTML into . \"\"\" render . documentation ( project_configuration ( directory , config_file ) , overwrite = overwrite ) in_browser def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , port : int = None , host : str = None ) Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. port : The port to expose your documentation on (defaults to: 8000 ) host : The host to expose your documentation on (defaults to \"127.0.0.1\" ) View Source def in_browser ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , port : int = None , host : str = None , ) : \"\"\" Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it . - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * port * : The port to expose your documentation on ( defaults to : ` 8000 ` ) - * host * : The host to expose your documentation on ( defaults to ` \" 127.0.0.1 \" ` ) \"\"\" return server ( directory = directory , config_file = config_file , open_browser = True ) on_github_pages def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , message : str = None , force : bool = False , ignore_version : bool = False ) Regenerates and deploys the documentation to GitHub pages. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. message : The commit message to use when uploading your documentation. force : Force the push to the repository. ignore_version : Ignore check that build is not being deployed with an old version. View Source def on_github_pages ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , message : str = None , force : bool = False , ignore_version : bool = False , ) : \"\"\"Regenerates and deploys the documentation to GitHub pages. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *message*: The commit message to use when uploading your documentation. - *force*: Force the push to the repository. - *ignore_version*: Ignore check that build is not being deployed with an old version. \"\"\" project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) : conf = render . _mkdocs_config ( project_config [ \"mkdocs\" ] ) conf . config_file_path = directory gh_deploy ( conf , message = message , force = force , ignore_version = ignore_version , ) project_configuration def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' ) Returns the configuration associated with a project. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. View Source def project_configuration ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" ) : \"\"\" Returns the configuration associated with a project. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . \"\"\" return config . project ( directory = directory , config_file = config_file ) server def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , open_browser : bool = False , port : int = None , host : str = None ) Runs a development webserver enabling you to browse documentation locally. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. *open_browser\": If true a browser will be opened pointing at the documentation server port : The port to expose your documentation on (defaults to: 8000 ) host : The host to expose your documentation on (defaults to \"127.0.0.1\" ) View Source def server ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , open_browser : bool = False , port : int = None , host : str = None , ) : \"\"\" Runs a development webserver enabling you to browse documentation locally. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * open_browser \" : If true a browser will be opened pointing at the documentation server - * port * : The port to expose your documentation on ( defaults to : ` 8000 ` ) - * host * : The host to expose your documentation on ( defaults to ` \" 127.0.0.1 \" ` ) \"\"\" api = hug . API ( \" Doc Server \" ) project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) as doc_folder : @ hug . static ( \" / \" , api = api ) def my_static_dirs () : return ( doc_folder , ) if open_browser : @ hug . startup ( api = api ) def open_browser_to_docs ( * args , ** kwargs ) : webbrowser . open_new ( \" {}:{} \" . format ( project_config [ \" host \" ], project_config [ \" port \" ] )) api . http . serve ( host = host or project_config [ \" host \" ], port = port or project_config [ \" port \" ], no_documentation = True , display_intro = False , )","title":"Api"},{"location":"reference/portray/api/#module-portrayapi","text":"This module defines the programmatic API that can be used to interact with portray to generate and view documentation. If you want to extend portray or use it directly from within Python - this is the place to start. View Source \"\"\"This module defines the programmatic API that can be used to interact with `portray` to generate and view documentation. If you want to extend `portray` or use it directly from within Python - this is the place to start. \"\"\" import os import webbrowser import hug from mkdocs.commands.gh_deploy import gh_deploy from portray import config , render def as_html ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , output_dir : str = \"site\" , overwrite : bool = False , ): \"\"\"Produces HTML documentation for a Python project. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *output_dir*: The directory to place the generated HTML into. \"\"\" render . documentation ( project_configuration ( directory , config_file ), overwrite = overwrite ) def in_browser ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , port : int = None , host : str = None , ): \"\"\"Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *port*: The port to expose your documentation on (defaults to: `8000`) - *host*: The host to expose your documentation on (defaults to `\"127.0.0.1\"`) \"\"\" return server ( directory = directory , config_file = config_file , open_browser = True ) def server ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , open_browser : bool = False , port : int = None , host : str = None , ): \"\"\"Runs a development webserver enabling you to browse documentation locally. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *open_browser\": If true a browser will be opened pointing at the documentation server - *port*: The port to expose your documentation on (defaults to: `8000`) - *host*: The host to expose your documentation on (defaults to `\"127.0.0.1\"`) \"\"\" api = hug . API ( \"Doc Server\" ) project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) as doc_folder : @hug.static ( \"/\" , api = api ) def my_static_dirs (): return ( doc_folder ,) if open_browser : @hug.startup ( api = api ) def open_browser_to_docs ( * args , ** kwargs ): webbrowser . open_new ( \"{}:{}\" . format ( project_config [ \"host\" ], project_config [ \"port\" ])) api . http . serve ( host = host or project_config [ \"host\" ], port = port or project_config [ \"port\" ], no_documentation = True , display_intro = False , ) def project_configuration ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" ): \"\"\"Returns the configuration associated with a project. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. \"\"\" return config . project ( directory = directory , config_file = config_file ) def on_github_pages ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , message : str = None , force : bool = False , ignore_version : bool = False , ): \"\"\"Regenerates and deploys the documentation to GitHub pages. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *message*: The commit message to use when uploading your documentation. - *force*: Force the push to the repository. - *ignore_version*: Ignore check that build is not being deployed with an old version. \"\"\" project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ): conf = render . _mkdocs_config ( project_config [ \"mkdocs\" ]) conf . config_file_path = directory gh_deploy ( conf , message = message , force = force , ignore_version = ignore_version , )","title":"Module portray.api"},{"location":"reference/portray/api/#functions","text":"","title":"Functions"},{"location":"reference/portray/api/#as_html","text":"def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , output_dir : str = 'site' , overwrite : bool = False ) Produces HTML documentation for a Python project. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. output_dir : The directory to place the generated HTML into. View Source def as_html ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , output_dir : str = \" site \" , overwrite : bool = False , ) : \"\"\" Produces HTML documentation for a Python project. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * output_dir * : The directory to place the generated HTML into . \"\"\" render . documentation ( project_configuration ( directory , config_file ) , overwrite = overwrite )","title":"as_html"},{"location":"reference/portray/api/#in_browser","text":"def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , port : int = None , host : str = None ) Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. port : The port to expose your documentation on (defaults to: 8000 ) host : The host to expose your documentation on (defaults to \"127.0.0.1\" ) View Source def in_browser ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , port : int = None , host : str = None , ) : \"\"\" Runs a development webserver enabling you to browse documentation locally then opens a web browser pointing to it . - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * port * : The port to expose your documentation on ( defaults to : ` 8000 ` ) - * host * : The host to expose your documentation on ( defaults to ` \" 127.0.0.1 \" ` ) \"\"\" return server ( directory = directory , config_file = config_file , open_browser = True )","title":"in_browser"},{"location":"reference/portray/api/#on_github_pages","text":"def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , message : str = None , force : bool = False , ignore_version : bool = False ) Regenerates and deploys the documentation to GitHub pages. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. message : The commit message to use when uploading your documentation. force : Force the push to the repository. ignore_version : Ignore check that build is not being deployed with an old version. View Source def on_github_pages ( directory : str = os . getcwd (), config_file : str = \"pyproject.toml\" , message : str = None , force : bool = False , ignore_version : bool = False , ) : \"\"\"Regenerates and deploys the documentation to GitHub pages. - *directory*: The root folder of your project. - *config_file*: The [TOML](https://github.com/toml-lang/toml#toml) formatted config file you wish to use. - *message*: The commit message to use when uploading your documentation. - *force*: Force the push to the repository. - *ignore_version*: Ignore check that build is not being deployed with an old version. \"\"\" project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) : conf = render . _mkdocs_config ( project_config [ \"mkdocs\" ] ) conf . config_file_path = directory gh_deploy ( conf , message = message , force = force , ignore_version = ignore_version , )","title":"on_github_pages"},{"location":"reference/portray/api/#project_configuration","text":"def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' ) Returns the configuration associated with a project. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. View Source def project_configuration ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" ) : \"\"\" Returns the configuration associated with a project. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . \"\"\" return config . project ( directory = directory , config_file = config_file )","title":"project_configuration"},{"location":"reference/portray/api/#server","text":"def ( directory : str = '/home/timothyedmundcrosley/Projects/portray' , config_file : str = 'pyproject.toml' , open_browser : bool = False , port : int = None , host : str = None ) Runs a development webserver enabling you to browse documentation locally. directory : The root folder of your project. config_file : The TOML formatted config file you wish to use. *open_browser\": If true a browser will be opened pointing at the documentation server port : The port to expose your documentation on (defaults to: 8000 ) host : The host to expose your documentation on (defaults to \"127.0.0.1\" ) View Source def server ( directory : str = os . getcwd () , config_file : str = \" pyproject.toml \" , open_browser : bool = False , port : int = None , host : str = None , ) : \"\"\" Runs a development webserver enabling you to browse documentation locally. - * directory * : The root folder of your project . - * config_file * : The [ TOML ] ( https : // github . com / toml - lang / toml # toml ) formatted config file you wish to use . - * open_browser \" : If true a browser will be opened pointing at the documentation server - * port * : The port to expose your documentation on ( defaults to : ` 8000 ` ) - * host * : The host to expose your documentation on ( defaults to ` \" 127.0.0.1 \" ` ) \"\"\" api = hug . API ( \" Doc Server \" ) project_config = project_configuration ( directory , config_file ) with render . documentation_in_temp_folder ( project_config ) as doc_folder : @ hug . static ( \" / \" , api = api ) def my_static_dirs () : return ( doc_folder , ) if open_browser : @ hug . startup ( api = api ) def open_browser_to_docs ( * args , ** kwargs ) : webbrowser . open_new ( \" {}:{} \" . format ( project_config [ \" host \" ], project_config [ \" port \" ] )) api . http . serve ( host = host or project_config [ \" host \" ], port = port or project_config [ \" port \" ], no_documentation = True , display_intro = False , )","title":"server"},{"location":"reference/portray/cli/","text":"Module portray.cli This module defines CLI interaction when using portray . This is powered by hug which means unless necessary it should maintain 1:1 compatibility with the programmatic API definition in the API module portray as_html : Renders the project as HTML into the site or other specified output directory portray in_browser : Runs a server with the rendered documentation pointing a browser to it portray server : Starts a local development server (by default at localhost:8000) portray project_configuration : Returns back the project configuration as determined by portray View Source \"\"\"This module defines CLI interaction when using `portray`. This is powered by [hug](https://github.com/hugapi/hug) which means unless necessary it should maintain 1:1 compatibility with the programmatic API definition in the [API module](/reference/portray/api) - `portray as_html`: Renders the project as HTML into the `site` or other specified output directory - `portray in_browser`: Runs a server with the rendered documentation pointing a browser to it - `portray server`: Starts a local development server (by default at localhost:8000) - `portray project_configuration`: Returns back the project configuration as determined by` portray` \"\"\" from pprint import pprint import hug from portray import api cli = hug . cli ( api = hug . API ( __name__ )) cli ( api . as_html ) cli . output ( pprint )( api . project_configuration ) cli ( api . server ) cli ( api . in_browser ) cli ( api . on_github_pages )","title":"Cli"},{"location":"reference/portray/cli/#module-portraycli","text":"This module defines CLI interaction when using portray . This is powered by hug which means unless necessary it should maintain 1:1 compatibility with the programmatic API definition in the API module portray as_html : Renders the project as HTML into the site or other specified output directory portray in_browser : Runs a server with the rendered documentation pointing a browser to it portray server : Starts a local development server (by default at localhost:8000) portray project_configuration : Returns back the project configuration as determined by portray View Source \"\"\"This module defines CLI interaction when using `portray`. This is powered by [hug](https://github.com/hugapi/hug) which means unless necessary it should maintain 1:1 compatibility with the programmatic API definition in the [API module](/reference/portray/api) - `portray as_html`: Renders the project as HTML into the `site` or other specified output directory - `portray in_browser`: Runs a server with the rendered documentation pointing a browser to it - `portray server`: Starts a local development server (by default at localhost:8000) - `portray project_configuration`: Returns back the project configuration as determined by` portray` \"\"\" from pprint import pprint import hug from portray import api cli = hug . cli ( api = hug . API ( __name__ )) cli ( api . as_html ) cli . output ( pprint )( api . project_configuration ) cli ( api . server ) cli ( api . in_browser ) cli ( api . on_github_pages )","title":"Module portray.cli"},{"location":"reference/portray/config/","text":"Module portray.config Defines the configuration defaults and load functions used by portray View Source \"\"\"Defines the configuration defaults and load functions used by `portray`\"\"\" import os from typing import Dict , List , Union , cast from urllib import parse import mkdocs.config as _mkdocs_config import mkdocs.exceptions as _mkdocs_exceptions from git import Repo from toml import load as toml_load from portray.exceptions import NoProjectFound PORTRAY_DEFAULTS = { \"docs_dir\" : \"docs\" , \"output_dir\" : \"site\" , \"port\" : 8000 , \"host\" : \"127.0.0.1\" } MKDOCS_DEFAULTS = { \"site_name\" : os . path . basename ( os . getcwd ()), \"config_file_path\" : os . getcwd (), \"theme\" : { \"name\" : \"material\" , \"palette\" : { \"primary\" : \"green\" , \"accent\" : \"lightgreen\" }, \"custom_dir\" : os . path . join ( os . path . dirname ( __file__ ), \"mkdocs_templates\" ), }, \"markdown_extensions\" : [ \"admonition\" , \"codehilite\" , \"extra\" , \"pymdownx.details\" , \"pymdownx.highlight\" , ], } PDOC3_DEFAULTS = { \"modules\" : [ os . path . basename ( os . getcwd ())], \"filter\" : None , \"force\" : True , \"html\" : False , \"pdf\" : False , \"html_dir\" : None , \"html_no_source\" : False , \"overwrite\" : False , \"external_links\" : False , \"template_dir\" : os . path . join ( os . path . dirname ( __file__ ), \"pdoc3_templates\" ), \"link_prefix\" : None , \"close_stdin\" : False , \"http\" : \"\" , \"config\" : { \"show_type_annotations\" : True }, } # type: Dict[str, Union[str, str, bool, None, Dict, List]] def project ( directory : str , config_file : str , ** overrides ) -> dict : \"\"\"Returns back the complete configuration - including all sub configuration components defined below that `portray` was able to determine for the project \"\"\" if not ( os . path . isfile ( os . path . join ( directory , config_file )) or os . path . isfile ( os . path . join ( directory , \"setup.py\" )) ): raise NoProjectFound ( directory ) project_config = { ** PORTRAY_DEFAULTS , \"directory\" : directory } project_config . update ( toml ( os . path . join ( directory , config_file ), ** overrides )) if \"modules\" in project_config : project_config . setdefault ( \"pdoc3\" , {}) . setdefault ( \"modules\" , project_config [ \"modules\" ]) project_config [ \"mkdocs\" ] = mkdocs ( directory , ** project_config . get ( \"mkdocs\" , {})) project_config [ \"pdoc3\" ] = pdoc3 ( directory , ** project_config . get ( \"pdoc3\" , {})) return project_config def toml ( location : str , ** overrides ) -> dict : \"\"\"Returns back the configuration found within the projects [TOML](https://github.com/toml-lang/toml#toml) config (if there is one). Generally this is a `pyproject.toml` file at the root of the project with a `[tool.portray]` section defined. \"\"\" try : toml_config = toml_load ( location ) tools = toml_config . get ( \"tool\" , {}) config = tools . get ( \"portray\" , {}) config . update ( overrides ) config [ \"file\" ] = location if not \"modules\" in config : if \"poetry\" in tools and \"name\" in tools [ \"poetry\" ]: config [ \"moudles\" ] = [ tools [ \"poetry\" ][ \"name\" ]] elif ( \"flit\" in tools and \"metadata\" in tools [ \"flit\" ] and \"module\" in tools [ \"flit\" ][ \"metadata\" ] ): config [ \"modules\" ] = [ tools [ \"flit\" ][ \"metadata\" ][ \"module\" ]] return config except Exception : print ( \"WARNING: No {} config file found\" . format ( location )) return {} def repository ( directory : str ) -> dict : \"\"\"Returns back any information that can be determined by introspecting the projects git repo (if there is one). \"\"\" config = {} try : config [ \"repo_url\" ] = Repo ( directory ) . remotes . origin . url config [ \"repo_name\" ] = parse . urlsplit ( config [ \"repo_url\" ]) . path . rstrip ( \".git\" ) . lstrip ( \"/\" ) except Exception : print ( \"WARNING: Unable to identify `repo_name` and `repo_url` automatically\" ) return config def mkdocs ( directory : str , ** overrides ) -> dict : \"\"\"Returns back the configuration that will be used when running mkdocs\"\"\" return { ** MKDOCS_DEFAULTS , ** repository ( directory ), ** overrides } def pdoc3 ( directory : str , ** overrides ) -> dict : \"\"\"Returns back the configuration that will be used when running pdoc3\"\"\" defaults = { ** PDOC3_DEFAULTS } defaults [ \"config\" ] = [ \"{}={}\" . format ( key , value ) for key , value in PDOC3_DEFAULTS [ \"config\" ] . items () ] defaults . update ( overrides ) return defaults Functions mkdocs def ( directory : str , ** overrides ) -> dict Returns back the configuration that will be used when running mkdocs View Source def mkdocs ( directory : str , ** overrides ) -> dict : \"\"\" Returns back the configuration that will be used when running mkdocs \"\"\" return { ** MKDOCS_DEFAULTS , ** repository ( directory ) , ** overrides } pdoc3 def ( directory : str , ** overrides ) -> dict Returns back the configuration that will be used when running pdoc3 View Source def pdoc3 ( directory : str , ** overrides ) -> dict : \"\"\" Returns back the configuration that will be used when running pdoc3 \"\"\" defaults = { ** PDOC3_DEFAULTS } defaults [ \" config \" ] = [ \" {}={} \" . format ( key , value ) for key , value in PDOC3_DEFAULTS [ \" config \" ]. items () ] defaults . update ( overrides ) return defaults project def ( directory : str , config_file : str , ** overrides ) -> dict Returns back the complete configuration - including all sub configuration components defined below that portray was able to determine for the project View Source def project ( directory : str , config_file : str , ** overrides ) -> dict : \"\"\" Returns back the complete configuration - including all sub configuration components defined below that ` portray ` was able to determine for the project \"\"\" if not ( os . path . isfile ( os . path . join ( directory , config_file )) or os . path . isfile ( os . path . join ( directory , \" setup.py \" )) ) : raise NoProjectFound ( directory ) project_config = { ** PORTRAY_DEFAULTS , \" directory \" : directory } project_config . update ( toml ( os . path . join ( directory , config_file ) , ** overrides )) if \" modules \" in project_config : project_config . setdefault ( \" pdoc3 \" , {} ) . setdefault ( \" modules \" , project_config [ \" modules \" ] ) project_config [ \" mkdocs \" ] = mkdocs ( directory , ** project_config . get ( \" mkdocs \" , {} )) project_config [ \" pdoc3 \" ] = pdoc3 ( directory , ** project_config . get ( \" pdoc3 \" , {} )) return project_config repository def ( directory : str ) -> dict Returns back any information that can be determined by introspecting the projects git repo (if there is one). View Source def repository ( directory : str ) -> dict : \"\"\" Returns back any information that can be determined by introspecting the projects git repo ( if there is one ) . \"\"\" config = {} try : config [ \" repo_url \" ] = Repo ( directory ) . remotes . origin . url config [ \" repo_name \" ] = parse . urlsplit ( config [ \" repo_url \" ] ) . path . rstrip ( \" .git \" ) . lstrip ( \" / \" ) except Exception : print ( \" WARNING: Unable to identify `repo_name` and `repo_url` automatically \" ) return config toml def ( location : str , ** overrides ) -> dict Returns back the configuration found within the projects TOML config (if there is one). Generally this is a pyproject.toml file at the root of the project with a [tool.portray] section defined. View Source def toml ( location : str , ** overrides ) -> dict : \"\"\" Returns back the configuration found within the projects [ TOML ] ( https : // github . com / toml - lang / toml # toml ) config ( if there is one ) . Generally this is a ` pyproject . toml ` file at the root of the project with a `[ tool . portray ]` section defined . \"\"\" try : toml_config = toml_load ( location ) tools = toml_config . get ( \" tool \" , {} ) config = tools . get ( \" portray \" , {} ) config . update ( overrides ) config [ \" file \" ] = location if not \" modules \" in config : if \" poetry \" in tools and \" name \" in tools [ \" poetry \" ]: config [ \" moudles \" ] = [ tools [ \" poetry \" ][ \" name \" ]] elif ( \" flit \" in tools and \" metadata \" in tools [ \" flit \" ] and \" module \" in tools [ \" flit \" ][ \" metadata \" ] ) : config [ \" modules \" ] = [ tools [ \" flit \" ][ \" metadata \" ][ \" module \" ]] return config except Exception : print ( \" WARNING: No {} config file found \" . format ( location )) return {}","title":"Config"},{"location":"reference/portray/config/#module-portrayconfig","text":"Defines the configuration defaults and load functions used by portray View Source \"\"\"Defines the configuration defaults and load functions used by `portray`\"\"\" import os from typing import Dict , List , Union , cast from urllib import parse import mkdocs.config as _mkdocs_config import mkdocs.exceptions as _mkdocs_exceptions from git import Repo from toml import load as toml_load from portray.exceptions import NoProjectFound PORTRAY_DEFAULTS = { \"docs_dir\" : \"docs\" , \"output_dir\" : \"site\" , \"port\" : 8000 , \"host\" : \"127.0.0.1\" } MKDOCS_DEFAULTS = { \"site_name\" : os . path . basename ( os . getcwd ()), \"config_file_path\" : os . getcwd (), \"theme\" : { \"name\" : \"material\" , \"palette\" : { \"primary\" : \"green\" , \"accent\" : \"lightgreen\" }, \"custom_dir\" : os . path . join ( os . path . dirname ( __file__ ), \"mkdocs_templates\" ), }, \"markdown_extensions\" : [ \"admonition\" , \"codehilite\" , \"extra\" , \"pymdownx.details\" , \"pymdownx.highlight\" , ], } PDOC3_DEFAULTS = { \"modules\" : [ os . path . basename ( os . getcwd ())], \"filter\" : None , \"force\" : True , \"html\" : False , \"pdf\" : False , \"html_dir\" : None , \"html_no_source\" : False , \"overwrite\" : False , \"external_links\" : False , \"template_dir\" : os . path . join ( os . path . dirname ( __file__ ), \"pdoc3_templates\" ), \"link_prefix\" : None , \"close_stdin\" : False , \"http\" : \"\" , \"config\" : { \"show_type_annotations\" : True }, } # type: Dict[str, Union[str, str, bool, None, Dict, List]] def project ( directory : str , config_file : str , ** overrides ) -> dict : \"\"\"Returns back the complete configuration - including all sub configuration components defined below that `portray` was able to determine for the project \"\"\" if not ( os . path . isfile ( os . path . join ( directory , config_file )) or os . path . isfile ( os . path . join ( directory , \"setup.py\" )) ): raise NoProjectFound ( directory ) project_config = { ** PORTRAY_DEFAULTS , \"directory\" : directory } project_config . update ( toml ( os . path . join ( directory , config_file ), ** overrides )) if \"modules\" in project_config : project_config . setdefault ( \"pdoc3\" , {}) . setdefault ( \"modules\" , project_config [ \"modules\" ]) project_config [ \"mkdocs\" ] = mkdocs ( directory , ** project_config . get ( \"mkdocs\" , {})) project_config [ \"pdoc3\" ] = pdoc3 ( directory , ** project_config . get ( \"pdoc3\" , {})) return project_config def toml ( location : str , ** overrides ) -> dict : \"\"\"Returns back the configuration found within the projects [TOML](https://github.com/toml-lang/toml#toml) config (if there is one). Generally this is a `pyproject.toml` file at the root of the project with a `[tool.portray]` section defined. \"\"\" try : toml_config = toml_load ( location ) tools = toml_config . get ( \"tool\" , {}) config = tools . get ( \"portray\" , {}) config . update ( overrides ) config [ \"file\" ] = location if not \"modules\" in config : if \"poetry\" in tools and \"name\" in tools [ \"poetry\" ]: config [ \"moudles\" ] = [ tools [ \"poetry\" ][ \"name\" ]] elif ( \"flit\" in tools and \"metadata\" in tools [ \"flit\" ] and \"module\" in tools [ \"flit\" ][ \"metadata\" ] ): config [ \"modules\" ] = [ tools [ \"flit\" ][ \"metadata\" ][ \"module\" ]] return config except Exception : print ( \"WARNING: No {} config file found\" . format ( location )) return {} def repository ( directory : str ) -> dict : \"\"\"Returns back any information that can be determined by introspecting the projects git repo (if there is one). \"\"\" config = {} try : config [ \"repo_url\" ] = Repo ( directory ) . remotes . origin . url config [ \"repo_name\" ] = parse . urlsplit ( config [ \"repo_url\" ]) . path . rstrip ( \".git\" ) . lstrip ( \"/\" ) except Exception : print ( \"WARNING: Unable to identify `repo_name` and `repo_url` automatically\" ) return config def mkdocs ( directory : str , ** overrides ) -> dict : \"\"\"Returns back the configuration that will be used when running mkdocs\"\"\" return { ** MKDOCS_DEFAULTS , ** repository ( directory ), ** overrides } def pdoc3 ( directory : str , ** overrides ) -> dict : \"\"\"Returns back the configuration that will be used when running pdoc3\"\"\" defaults = { ** PDOC3_DEFAULTS } defaults [ \"config\" ] = [ \"{}={}\" . format ( key , value ) for key , value in PDOC3_DEFAULTS [ \"config\" ] . items () ] defaults . update ( overrides ) return defaults","title":"Module portray.config"},{"location":"reference/portray/config/#functions","text":"","title":"Functions"},{"location":"reference/portray/config/#mkdocs","text":"def ( directory : str , ** overrides ) -> dict Returns back the configuration that will be used when running mkdocs View Source def mkdocs ( directory : str , ** overrides ) -> dict : \"\"\" Returns back the configuration that will be used when running mkdocs \"\"\" return { ** MKDOCS_DEFAULTS , ** repository ( directory ) , ** overrides }","title":"mkdocs"},{"location":"reference/portray/config/#pdoc3","text":"def ( directory : str , ** overrides ) -> dict Returns back the configuration that will be used when running pdoc3 View Source def pdoc3 ( directory : str , ** overrides ) -> dict : \"\"\" Returns back the configuration that will be used when running pdoc3 \"\"\" defaults = { ** PDOC3_DEFAULTS } defaults [ \" config \" ] = [ \" {}={} \" . format ( key , value ) for key , value in PDOC3_DEFAULTS [ \" config \" ]. items () ] defaults . update ( overrides ) return defaults","title":"pdoc3"},{"location":"reference/portray/config/#project","text":"def ( directory : str , config_file : str , ** overrides ) -> dict Returns back the complete configuration - including all sub configuration components defined below that portray was able to determine for the project View Source def project ( directory : str , config_file : str , ** overrides ) -> dict : \"\"\" Returns back the complete configuration - including all sub configuration components defined below that ` portray ` was able to determine for the project \"\"\" if not ( os . path . isfile ( os . path . join ( directory , config_file )) or os . path . isfile ( os . path . join ( directory , \" setup.py \" )) ) : raise NoProjectFound ( directory ) project_config = { ** PORTRAY_DEFAULTS , \" directory \" : directory } project_config . update ( toml ( os . path . join ( directory , config_file ) , ** overrides )) if \" modules \" in project_config : project_config . setdefault ( \" pdoc3 \" , {} ) . setdefault ( \" modules \" , project_config [ \" modules \" ] ) project_config [ \" mkdocs \" ] = mkdocs ( directory , ** project_config . get ( \" mkdocs \" , {} )) project_config [ \" pdoc3 \" ] = pdoc3 ( directory , ** project_config . get ( \" pdoc3 \" , {} )) return project_config","title":"project"},{"location":"reference/portray/config/#repository","text":"def ( directory : str ) -> dict Returns back any information that can be determined by introspecting the projects git repo (if there is one). View Source def repository ( directory : str ) -> dict : \"\"\" Returns back any information that can be determined by introspecting the projects git repo ( if there is one ) . \"\"\" config = {} try : config [ \" repo_url \" ] = Repo ( directory ) . remotes . origin . url config [ \" repo_name \" ] = parse . urlsplit ( config [ \" repo_url \" ] ) . path . rstrip ( \" .git \" ) . lstrip ( \" / \" ) except Exception : print ( \" WARNING: Unable to identify `repo_name` and `repo_url` automatically \" ) return config","title":"repository"},{"location":"reference/portray/config/#toml","text":"def ( location : str , ** overrides ) -> dict Returns back the configuration found within the projects TOML config (if there is one). Generally this is a pyproject.toml file at the root of the project with a [tool.portray] section defined. View Source def toml ( location : str , ** overrides ) -> dict : \"\"\" Returns back the configuration found within the projects [ TOML ] ( https : // github . com / toml - lang / toml # toml ) config ( if there is one ) . Generally this is a ` pyproject . toml ` file at the root of the project with a `[ tool . portray ]` section defined . \"\"\" try : toml_config = toml_load ( location ) tools = toml_config . get ( \" tool \" , {} ) config = tools . get ( \" portray \" , {} ) config . update ( overrides ) config [ \" file \" ] = location if not \" modules \" in config : if \" poetry \" in tools and \" name \" in tools [ \" poetry \" ]: config [ \" moudles \" ] = [ tools [ \" poetry \" ][ \" name \" ]] elif ( \" flit \" in tools and \" metadata \" in tools [ \" flit \" ] and \" module \" in tools [ \" flit \" ][ \" metadata \" ] ) : config [ \" modules \" ] = [ tools [ \" flit \" ][ \" metadata \" ][ \" module \" ]] return config except Exception : print ( \" WARNING: No {} config file found \" . format ( location )) return {}","title":"toml"},{"location":"reference/portray/exceptions/","text":"Module portray.exceptions View Source class PortrayError ( Exception ) : \"\"\" Base class for all exceptions returned from Portray \"\"\" pass class NoProjectFound ( PortrayError ) : \"\"\" Exception should be thrown when portray is ran in a directory with no Python project \"\"\" def __init__ ( self , directory ) : super () . __init__ ( self , \" No Python project found in the given directory: '{}' \" . format ( directory ) ) self . directory = directory class DocumentationAlreadyExists ( PortrayError ) : \"\"\" Throw when portray has been told to output documentation where it already exists \"\"\" def __init__ ( self , directory ) : super () . __init__ ( self , \" Documentation already exists in '{}'. Use --overwrite to ignore \" . format ( directory ) , ) self . directory = directory Classes DocumentationAlreadyExists class ( directory ) Throw when portray has been told to output documentation where it already exists View Source class DocumentationAlreadyExists ( PortrayError ): \"\"\"Throw when portray has been told to output documentation where it already exists\"\"\" def __init__ ( self , directory ): super (). __init__ ( self , \"Documentation already exists in '{}'. Use --overwrite to ignore\" . format ( directory ), ) self . directory = directory Ancestors (in MRO) portray.exceptions.PortrayError builtins.Exception builtins.BaseException NoProjectFound class ( directory ) Exception should be thrown when portray is ran in a directory with no Python project View Source class NoProjectFound ( PortrayError ): \"\"\"Exception should be thrown when portray is ran in a directory with no Python project\"\"\" def __init__ ( self , directory ): super (). __init__ ( self , \"No Python project found in the given directory: '{}'\" . format ( directory ) ) self . directory = directory Ancestors (in MRO) portray.exceptions.PortrayError builtins.Exception builtins.BaseException PortrayError class ( * args , ** kwargs ) Base class for all exceptions returned from Portray View Source class PortrayError ( Exception ) : \"\"\" Base class for all exceptions returned from Portray \"\"\" pass Ancestors (in MRO) builtins.Exception builtins.BaseException Descendants portray.exceptions.NoProjectFound portray.exceptions.DocumentationAlreadyExists","title":"Exceptions"},{"location":"reference/portray/exceptions/#module-portrayexceptions","text":"View Source class PortrayError ( Exception ) : \"\"\" Base class for all exceptions returned from Portray \"\"\" pass class NoProjectFound ( PortrayError ) : \"\"\" Exception should be thrown when portray is ran in a directory with no Python project \"\"\" def __init__ ( self , directory ) : super () . __init__ ( self , \" No Python project found in the given directory: '{}' \" . format ( directory ) ) self . directory = directory class DocumentationAlreadyExists ( PortrayError ) : \"\"\" Throw when portray has been told to output documentation where it already exists \"\"\" def __init__ ( self , directory ) : super () . __init__ ( self , \" Documentation already exists in '{}'. Use --overwrite to ignore \" . format ( directory ) , ) self . directory = directory","title":"Module portray.exceptions"},{"location":"reference/portray/exceptions/#classes","text":"","title":"Classes"},{"location":"reference/portray/exceptions/#documentationalreadyexists","text":"class ( directory ) Throw when portray has been told to output documentation where it already exists View Source class DocumentationAlreadyExists ( PortrayError ): \"\"\"Throw when portray has been told to output documentation where it already exists\"\"\" def __init__ ( self , directory ): super (). __init__ ( self , \"Documentation already exists in '{}'. Use --overwrite to ignore\" . format ( directory ), ) self . directory = directory","title":"DocumentationAlreadyExists"},{"location":"reference/portray/exceptions/#ancestors-in-mro","text":"portray.exceptions.PortrayError builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/portray/exceptions/#noprojectfound","text":"class ( directory ) Exception should be thrown when portray is ran in a directory with no Python project View Source class NoProjectFound ( PortrayError ): \"\"\"Exception should be thrown when portray is ran in a directory with no Python project\"\"\" def __init__ ( self , directory ): super (). __init__ ( self , \"No Python project found in the given directory: '{}'\" . format ( directory ) ) self . directory = directory","title":"NoProjectFound"},{"location":"reference/portray/exceptions/#ancestors-in-mro_1","text":"portray.exceptions.PortrayError builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/portray/exceptions/#portrayerror","text":"class ( * args , ** kwargs ) Base class for all exceptions returned from Portray View Source class PortrayError ( Exception ) : \"\"\" Base class for all exceptions returned from Portray \"\"\" pass","title":"PortrayError"},{"location":"reference/portray/exceptions/#ancestors-in-mro_2","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/portray/exceptions/#descendants","text":"portray.exceptions.NoProjectFound portray.exceptions.DocumentationAlreadyExists","title":"Descendants"},{"location":"reference/portray/render/","text":"Module portray.render View Source import os import shutil import tempfile from argparse import Namespace from contextlib import contextmanager from glob import glob import mkdocs . config as mkdocs_config import mkdocs . exceptions as _ mkdocs_exceptions import pdoc . cli from mkdocs . commands . build import build as mkdocs_build from portray . exceptions import DocumentationAlreadyExists def pdoc3 ( config ) : pdoc . cli . main ( Namespace ( **config )) def mkdocs ( config ) : config_instance = _ mkdocs_config ( config ) return mkdocs_build ( config_instance ) def documentation ( config , overwrite : bool = False ) : if os . path . exists ( config [ \"output_dir\" ]) : if overwrite : shutil . rmtree ( config [ \"output_dir\" ]) else : raise DocumentationAlreadyExists ( config [ \"output_dir\" ]) with documentation_in_temp_folder ( config ) as documentation_output: shutil . copytree ( documentation_output , config [ \"output_dir\" ]) @contextmanager def documentation_in_temp_folder ( config ) : with tempfile . TemporaryDirectory () as input_dir: input_dir = os . path . join ( input_dir , \"input\" ) with tempfile . TemporaryDirectory () as temp_output_dir: shutil . copytree ( config [ \"directory\" ], input_dir ) if not \"output_dir\" in config [ \"pdoc3\" ] : config [ \"pdoc3\" ][ \"output_dir\" ] = os . path . join ( input_dir , \"reference\" ) pdoc3 ( config [ \"pdoc3\" ]) if not \"docs_dir\" in config [ \"mkdocs\" ] : config [ \"mkdocs\" ][ \"docs_dir\" ] = input_dir if not \"site_dir\" in config [ \"mkdocs\" ] : config [ \"mkdocs\" ][ \"site_dir\" ] = temp_output_dir if not \"nav\" in config [ \"mkdocs\" ] : nav = config [ \"mkdocs\" ][ \"nav\" ] = [] root_docs = glob ( os . path . join ( input_dir , \"*.md\" )) readme_doc = os . path . join ( input_dir , \"README.md\" ) if readme_doc in root_docs: root_docs . remove ( readme_doc ) nav . append ({ \"Home\" : \"README.md\" }) nav . extend ( _ doc ( doc , input_dir ) for doc in root_docs ) docs_dir_docs = glob ( os . path . join ( input_dir , config [ \"docs_dir\" ], \"*.md\" )) nav . extend ( _ nested_docs ( os . path . join ( input_dir , config [ \"docs_dir\" ]), input_dir )) reference_docs = glob ( os . path . join ( config [ \"pdoc3\" ][ \"output_dir\" ], \"**/*.md\" )) nav . append ({ \"Reference\" : _ nested_docs ( config [ \"pdoc3\" ][ \"output_dir\" ], input_dir )}) mkdocs ( config [ \"mkdocs\" ]) yield temp_output_dir def _ mkdocs_config ( config ) : config_instance = mkdocs_config . Config ( schema = mkdocs_config . DEFAULT_SCHEMA ) config_instance . load_dict ( config ) errors , warnings = config_instance . validate () if errors : raise _ mkdocs_exceptions . ConfigurationError ( \"Aborted with {} Configuration Errors!\" . format ( len ( errors )) ) elif config . get ( \"strict\" , False ) and warnings : raise _ mkdocs_exceptions . ConfigurationError ( \"Aborted with {} Configuration Warnings in 'strict' mode!\" . format ( len ( warnings )) ) config_instance . config_file_path = config [ \"config_file_path\" ] return config_instance def _ nested_docs ( directory , root_directory , include_docs = True ) -> list : nav = [ _ doc ( doc , root_directory ) for doc in glob ( os . path . join ( directory , \"*.md\" ))] nested_dirs = glob ( os . path . join ( directory , \"*/\" )) for nested_dir in nested_dirs: nav . append ({ _ label ( nested_dir [:- 1 ]) : _ nested_docs ( nested_dir , root_directory )}) return nav def _ label ( path ) : return os . path . basename ( path ). split ( \".\" )[ 0 ]. replace ( \"-\" , \" \" ). replace ( \"_\" , \" \" ). title () def _ doc ( path , root_path ) : path = os . path . relpath ( path , root_path ) return { _ label ( path ) : path } Functions documentation def ( config , overwrite : bool = False ) View Source def documentation ( config , overwrite : bool = False ) : if os . path . exists ( config [ \" output_dir \" ] ) : if overwrite : shutil . rmtree ( config [ \" output_dir \" ] ) else : raise DocumentationAlreadyExists ( config [ \" output_dir \" ] ) with documentation_in_temp_folder ( config ) as documentation_output : shutil . copytree ( documentation_output , config [ \" output_dir \" ] ) documentation_in_temp_folder def ( config ) View Source @ contextmanager def documentation_in_temp_folder ( config ) : with tempfile . TemporaryDirectory () as input_dir : input_dir = os . path . join ( input_dir , \" input \" ) with tempfile . TemporaryDirectory () as temp_output_dir : shutil . copytree ( config [ \" directory \" ], input_dir ) if not \" output_dir \" in config [ \" pdoc3 \" ]: config [ \" pdoc3 \" ][ \" output_dir \" ] = os . path . join ( input_dir , \" reference \" ) pdoc3 ( config [ \" pdoc3 \" ] ) if not \" docs_dir \" in config [ \" mkdocs \" ]: config [ \" mkdocs \" ][ \" docs_dir \" ] = input_dir if not \" site_dir \" in config [ \" mkdocs \" ]: config [ \" mkdocs \" ][ \" site_dir \" ] = temp_output_dir if not \" nav \" in config [ \" mkdocs \" ]: nav = config [ \" mkdocs \" ][ \" nav \" ] = [] root_docs = glob ( os . path . join ( input_dir , \" *.md \" )) readme_doc = os . path . join ( input_dir , \" README.md \" ) if readme_doc in root_docs : root_docs . remove ( readme_doc ) nav . append ( { \" Home \" : \" README.md \" } ) nav . extend ( _doc ( doc , input_dir ) for doc in root_docs ) docs_dir_docs = glob ( os . path . join ( input_dir , config [ \" docs_dir \" ], \" *.md \" )) nav . extend ( _nested_docs ( os . path . join ( input_dir , config [ \" docs_dir \" ] ) , input_dir )) reference_docs = glob ( os . path . join ( config [ \" pdoc3 \" ][ \" output_dir \" ], \" **/*.md \" )) nav . append ( { \" Reference \" : _nested_docs ( config [ \" pdoc3 \" ][ \" output_dir \" ], input_dir ) } ) mkdocs ( config [ \" mkdocs \" ] ) yield temp_output_dir mkdocs def ( config ) View Source def mkdocs ( config ) : config_instance = _mkdocs_config ( config ) return mkdocs_build ( config_instance ) pdoc3 def ( config ) View Source def pdoc3 ( config ): pdoc . cli . main ( Namespace ( ** config ))","title":"Render"},{"location":"reference/portray/render/#module-portrayrender","text":"View Source import os import shutil import tempfile from argparse import Namespace from contextlib import contextmanager from glob import glob import mkdocs . config as mkdocs_config import mkdocs . exceptions as _ mkdocs_exceptions import pdoc . cli from mkdocs . commands . build import build as mkdocs_build from portray . exceptions import DocumentationAlreadyExists def pdoc3 ( config ) : pdoc . cli . main ( Namespace ( **config )) def mkdocs ( config ) : config_instance = _ mkdocs_config ( config ) return mkdocs_build ( config_instance ) def documentation ( config , overwrite : bool = False ) : if os . path . exists ( config [ \"output_dir\" ]) : if overwrite : shutil . rmtree ( config [ \"output_dir\" ]) else : raise DocumentationAlreadyExists ( config [ \"output_dir\" ]) with documentation_in_temp_folder ( config ) as documentation_output: shutil . copytree ( documentation_output , config [ \"output_dir\" ]) @contextmanager def documentation_in_temp_folder ( config ) : with tempfile . TemporaryDirectory () as input_dir: input_dir = os . path . join ( input_dir , \"input\" ) with tempfile . TemporaryDirectory () as temp_output_dir: shutil . copytree ( config [ \"directory\" ], input_dir ) if not \"output_dir\" in config [ \"pdoc3\" ] : config [ \"pdoc3\" ][ \"output_dir\" ] = os . path . join ( input_dir , \"reference\" ) pdoc3 ( config [ \"pdoc3\" ]) if not \"docs_dir\" in config [ \"mkdocs\" ] : config [ \"mkdocs\" ][ \"docs_dir\" ] = input_dir if not \"site_dir\" in config [ \"mkdocs\" ] : config [ \"mkdocs\" ][ \"site_dir\" ] = temp_output_dir if not \"nav\" in config [ \"mkdocs\" ] : nav = config [ \"mkdocs\" ][ \"nav\" ] = [] root_docs = glob ( os . path . join ( input_dir , \"*.md\" )) readme_doc = os . path . join ( input_dir , \"README.md\" ) if readme_doc in root_docs: root_docs . remove ( readme_doc ) nav . append ({ \"Home\" : \"README.md\" }) nav . extend ( _ doc ( doc , input_dir ) for doc in root_docs ) docs_dir_docs = glob ( os . path . join ( input_dir , config [ \"docs_dir\" ], \"*.md\" )) nav . extend ( _ nested_docs ( os . path . join ( input_dir , config [ \"docs_dir\" ]), input_dir )) reference_docs = glob ( os . path . join ( config [ \"pdoc3\" ][ \"output_dir\" ], \"**/*.md\" )) nav . append ({ \"Reference\" : _ nested_docs ( config [ \"pdoc3\" ][ \"output_dir\" ], input_dir )}) mkdocs ( config [ \"mkdocs\" ]) yield temp_output_dir def _ mkdocs_config ( config ) : config_instance = mkdocs_config . Config ( schema = mkdocs_config . DEFAULT_SCHEMA ) config_instance . load_dict ( config ) errors , warnings = config_instance . validate () if errors : raise _ mkdocs_exceptions . ConfigurationError ( \"Aborted with {} Configuration Errors!\" . format ( len ( errors )) ) elif config . get ( \"strict\" , False ) and warnings : raise _ mkdocs_exceptions . ConfigurationError ( \"Aborted with {} Configuration Warnings in 'strict' mode!\" . format ( len ( warnings )) ) config_instance . config_file_path = config [ \"config_file_path\" ] return config_instance def _ nested_docs ( directory , root_directory , include_docs = True ) -> list : nav = [ _ doc ( doc , root_directory ) for doc in glob ( os . path . join ( directory , \"*.md\" ))] nested_dirs = glob ( os . path . join ( directory , \"*/\" )) for nested_dir in nested_dirs: nav . append ({ _ label ( nested_dir [:- 1 ]) : _ nested_docs ( nested_dir , root_directory )}) return nav def _ label ( path ) : return os . path . basename ( path ). split ( \".\" )[ 0 ]. replace ( \"-\" , \" \" ). replace ( \"_\" , \" \" ). title () def _ doc ( path , root_path ) : path = os . path . relpath ( path , root_path ) return { _ label ( path ) : path }","title":"Module portray.render"},{"location":"reference/portray/render/#functions","text":"","title":"Functions"},{"location":"reference/portray/render/#documentation","text":"def ( config , overwrite : bool = False ) View Source def documentation ( config , overwrite : bool = False ) : if os . path . exists ( config [ \" output_dir \" ] ) : if overwrite : shutil . rmtree ( config [ \" output_dir \" ] ) else : raise DocumentationAlreadyExists ( config [ \" output_dir \" ] ) with documentation_in_temp_folder ( config ) as documentation_output : shutil . copytree ( documentation_output , config [ \" output_dir \" ] )","title":"documentation"},{"location":"reference/portray/render/#documentation_in_temp_folder","text":"def ( config ) View Source @ contextmanager def documentation_in_temp_folder ( config ) : with tempfile . TemporaryDirectory () as input_dir : input_dir = os . path . join ( input_dir , \" input \" ) with tempfile . TemporaryDirectory () as temp_output_dir : shutil . copytree ( config [ \" directory \" ], input_dir ) if not \" output_dir \" in config [ \" pdoc3 \" ]: config [ \" pdoc3 \" ][ \" output_dir \" ] = os . path . join ( input_dir , \" reference \" ) pdoc3 ( config [ \" pdoc3 \" ] ) if not \" docs_dir \" in config [ \" mkdocs \" ]: config [ \" mkdocs \" ][ \" docs_dir \" ] = input_dir if not \" site_dir \" in config [ \" mkdocs \" ]: config [ \" mkdocs \" ][ \" site_dir \" ] = temp_output_dir if not \" nav \" in config [ \" mkdocs \" ]: nav = config [ \" mkdocs \" ][ \" nav \" ] = [] root_docs = glob ( os . path . join ( input_dir , \" *.md \" )) readme_doc = os . path . join ( input_dir , \" README.md \" ) if readme_doc in root_docs : root_docs . remove ( readme_doc ) nav . append ( { \" Home \" : \" README.md \" } ) nav . extend ( _doc ( doc , input_dir ) for doc in root_docs ) docs_dir_docs = glob ( os . path . join ( input_dir , config [ \" docs_dir \" ], \" *.md \" )) nav . extend ( _nested_docs ( os . path . join ( input_dir , config [ \" docs_dir \" ] ) , input_dir )) reference_docs = glob ( os . path . join ( config [ \" pdoc3 \" ][ \" output_dir \" ], \" **/*.md \" )) nav . append ( { \" Reference \" : _nested_docs ( config [ \" pdoc3 \" ][ \" output_dir \" ], input_dir ) } ) mkdocs ( config [ \" mkdocs \" ] ) yield temp_output_dir","title":"documentation_in_temp_folder"},{"location":"reference/portray/render/#mkdocs","text":"def ( config ) View Source def mkdocs ( config ) : config_instance = _mkdocs_config ( config ) return mkdocs_build ( config_instance )","title":"mkdocs"},{"location":"reference/portray/render/#pdoc3","text":"def ( config ) View Source def pdoc3 ( config ): pdoc . cli . main ( Namespace ( ** config ))","title":"pdoc3"}]}